import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component CAmkES file
// 
////////////////////////////////////////////////////////////////////////////

componentCamkesPurpose(componentName) ::= <<
This header file contains the CAmkES component definition for the 
AADL thread implementation <componentName>.
>>

componentCamkesPrefix(name, date, path, datatypesHeader) ::= <<
<DARPALicenseComment()>

<filenameBlockComment(date, path, componentCamkesPurpose(name))>

>>

componentCamkesPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>

>>

importThreadIdl(threadImpl) ::= <<
import "../../interfaces/<threadImpl.idlFileName>";
>>

importReaderWriterIdl(type) ::= <<
import "../../interfaces/<type.readerWriterIdlFileName>";
>>

importSharedDataAccessorIdl(sharedDataAccessor) ::= <<
import "../../interfaces/<sharedDataAccessor.type.sharedDataIdlFileName>";
>>

importRpgIdl(remoteProcedureGroup) ::= <<
import "../../interfaces/<remoteProcedureGroup.idlName>";
>>

writeToPassiveReceiver(threadImpl) ::= <<
<if(threadImpl.isPassive)>
uses <threadImpl.idlName> <threadImpl.interfaceInstanceName>;
<endif>
>>


constructSenderInterface(connection) ::= <<
uses <connection.destPort.type.readerWriterInterfaceName> <connection.sourcePort.qualifiedName>;

>>


inputPortDecl(port) ::= <<
provides <port.type.readerWriterInterfaceName> <port.name>; 
has mutex <port.mutex>; 

>>

outputDataPortDecl(port) ::= <<
uses <port.type.readerWriterInterfaceName> <port.name>;

>>

sharedDataAccessorDecl(sharedDataAccessor) ::= <<
uses <sharedDataAccessor.type.readerWriterInterfaceName> <sharedDataAccessor.name>;

>>

constructMemoryInterface(memoryRegion, dispatcher) ::= <<
dataport Buf <memoryRegion.name>;
>>

writeProvidedInterface(dispatcher) ::= <<
<if(dispatcher.isPeriodic)><\\>
provides <dispatcher.type.readerWriterInterfaceName> <dispatcher.dispatcherComponentDispatchName>;
<elseif(dispatcher.isIRQ)><\\>
consumes DataAvailable <dispatcher.name>;
<dispatcher.memoryRegions:constructMemoryInterface(dispatcher)>
<endif>
>>

writeRpgInterface(endpoint) ::= <<
<endpoint.providesOrRequires> <endpoint.remoteProcedureGroup.name> <endpoint.name>;

>>


componentCamkesBody(threadImpl) ::= <<

import "../../interfaces/<threadImpl.idlFileName>";

// Idl files for ports
<threadImpl.threadPortTypes:importReaderWriterIdl();separator="\n">

// Idl files for shared data accessors
<threadImpl.sharedDataAccessorList:importSharedDataAccessorIdl();separator="\n">

// Idl files for RPCs
<threadImpl.usedRpgs:importRpgIdl();separator="\n">

<if(threadImpl.isActive)><\\>
// Passive component dispatch interfaces 
<threadImpl.model.passiveThreadImplementations:importThreadIdl();separator="\n">
<endif>

component <threadImpl.componentName> {
<if(threadImpl.isActive)><\\>
	control;
    has semaphore <threadImpl.dispatcherComponentSemaphoreName>;

	// references to other active thread send interfaces from passive
	// thread region controlled by active thread (if any)
	<threadImpl.nonlocalActiveThreadConnectionFrontier:constructSenderInterface()>

	// references to passive thread receivers	(if any)
	<threadImpl.model.passiveThreadImplementations:writeToPassiveReceiver()>
<elseif(threadImpl.containsDispatchers)><\\>
	provides <threadImpl.idlName> <threadImpl.componentDispatcherInterfaceVarIdName>;
<endif>
	<threadImpl.externalSemaphores:{ sem | has semaphore <sem>; }; separator="\n">
	<threadImpl.externalMutexes:{mut | has mutex <mut>; }; separator="\n">
	<threadImpl.endpoints:writeRpgInterface()>
	// interfaces for Periodic and IRQ port dispatchers.
	<threadImpl.dispatchers:writeProvidedInterface()>	
	
	// provided interfaces for data / shared data ports (if any)
	<threadImpl.inputDataPortList:inputPortDecl()>
	<threadImpl.outputDataPortList:outputDataPortDecl()>
	<threadImpl.sharedDataAccessorList:sharedDataAccessorDecl()>

	// provided interfaces for input event / event data ports (if any)
	<threadImpl.inputEventPortList:inputPortDecl()>
	<threadImpl.inputEventDataPortList:inputPortDecl()>
}


>> 

