import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component CAmkES file
// 
////////////////////////////////////////////////////////////////////////////

componentCamkesPurpose(componentName) ::= <<
This header file contains the CAmkES component definition for the 
AADL thread implementation <componentName>.
>>

componentCamkesPrefix(name, date, path, datatypesHeader) ::= <<
<DARPALicenseComment()>

<filenameBlockComment(date, path, componentCamkesPurpose(name))>

>>

componentCamkesPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>

>>

importThreadIdl(threadImpl) ::= <<
import "../../interfaces/<threadImpl.idlFileName>";
>>

importReaderWriterIdl(type) ::= <<
import "../../interfaces/<type.readerWriterIdlFileName>";
>>

importSharedDataAccessorIdl(sharedDataAccesor) ::= <<
import "../../interfaces/<sharedDataAccessor.type.sharedDataIdlFileName>";
>>

writeToPassiveReceiver(threadImpl) ::= <<
<if(threadImpl.isPassive)>
uses <threadImpl.idlName> <threadImpl.interfaceInstanceName>;
<endif>
>>


constructSenderInterface(connection) ::= <<
<if(connection.destPort.threadImplementation.isActive)><\\>
uses <connection.destPort.type.readerWriterInterfaceName> <connection.sourcePort.name>;
<endif>
>>


writeSenders(threadImpl) ::= <<
<threadImpl.isSrcOfConnectionList:constructSenderInterface()>
>>


inputPortDecl(port) ::= <<
provides <port.type.readerWriterInterfaceName> <port.name>; 
has mutex <port.mutex>; 

>>

outputDataPortDecl(port) ::= <<
uses <port.type.readerWriterInterfaceName> <port.name>;

>>

sharedDataAccessorDecl(sharedDataAcessor) ::= <<
uses <sharedDataAccessor.type.readerWriterInterfaceName> <sharedDataAccessor.name>;

>>

writeProvidedInterface(dispatcher) ::= <<
<if(dispatcher.isIRQ || dispatcher.isPeriodic)><\\>
provides <dispatcher.type.readerWriterInterfaceName> <dispatcher.dispatcherComponentDispatchName>;
<endif>
>>


componentCamkesBody(threadImpl) ::= <<

import "../../interfaces/<threadImpl.idlFileName>";

// Idl files for ports
<threadImpl.threadPortTypes:importReaderWriterIdl();separator="\n">

// Idl files for shared data accessors
<threadImpl.sharedDataAccessorList:importSharedDataAccessorIdl();separator="\n">

<if(threadImpl.isActive)><\\>
// Passive component dispatch interfaces 
<threadImpl.model.passiveThreadImplementations:importThreadIdl();separator="\n">
<endif>

component <threadImpl.componentName> {
<if(threadImpl.isActive)><\\>
	control;
    has mutex <threadImpl.dispatcherComponentMutexName>;

	// references to other active thread send interfaces
	<writeSenders(threadImpl)>

	// references to passive receivers	
	<threadImpl.model.passiveThreadImplementations:writeToPassiveReceiver()>
<else><\\>
	provides <threadImpl.idlName> <threadImpl.componentDispatcherInterfaceVarIdName>;
<endif>


	// dispatch interfaces for Periodic and IRQ ports.
	<threadImpl.dispatchers:writeProvidedInterface()>	
	<threadImpl.inputDataPortList:inputPortDecl()>
	<threadImpl.outputDataPortList:outputDataPortDecl()>
	<threadImpl.sharedDataAccessorList:sharedDataAccessorDecl()>

	<if(threadImpl.inputEventPortList || threadImpl.inputEventDataPortList)>
	// provided interfaces for input event / event data ports.
	<endif>
	<threadImpl.inputEventPortList:inputPortDecl()>
	<threadImpl.inputEventDataPortList:inputPortDecl()>
}


>> 

