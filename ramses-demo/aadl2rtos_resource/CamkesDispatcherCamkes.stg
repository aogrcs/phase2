import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations for camkes dispatcher component
// 
////////////////////////////////////////////////////////////////////////////

dispatcherComponentCamkesPurpose(componentName) ::= <<
This header file contains the CAmkES dispatcher component definition for the 
AADL active thread implementation <componentName>.
>>

dispatcherComponentCamkesPrefix(name, date, path, datatypesHeader) ::= <<
<DARPALicenseComment()>

<filenameBlockComment(date, path, dispatcherComponentCamkesPurpose(name))>

>>

importThreadIdl(threadImpl) ::= <<
import "../../interfaces/<threadImpl.idlFileName>";
>>

importReaderWriterIdl(type) ::= <<
import "../../interfaces/<type.readerWriterIdlFileName>";
>>

writeProvidedInterface(dispatcher) ::= <<
provides <dispatcher.type.readerWriterInterfaceName> <dispatcher.dispatcherComponentDispatchName>;
<if(dispatcher.isEvent)><\\>
has mutex <dispatcher.mutex>; 
<endif>
>>


writeToPassiveReceiver(threadImpl) ::= <<
<if(threadImpl.isPassive)>
uses <threadImpl.idlName> <threadImpl.interfaceInstanceName>;
<endif>
>>


constructSenderInterface(connection) ::= <<
<if(connection.destPort.threadImplementation.isActive)><\\>
uses <connection.destPort.type.readerWriterInterfaceName> <connection.sourcePort.name>;
<endif>
>>


writeSenders(threadImpl) ::= <<
<threadImpl.isSrcOfConnectionList:constructSenderInterface()>
>>

writeReceiveInterface(port) ::= <<
provides <port.type.readerWriterInterfaceName> <port.name>;
>>

dispatchComponentCDecls(threadImpl, model) ::= <<

// Passive component dispatch interfaces 
<model.threadImplementations:importThreadIdl()>

// Send/receive interfaces for active components
<model.activeThreadSendReceiveTypeList:importReaderWriterIdl()>

component <threadImpl.dispatcherComponentName> {
	control;
    
    has mutex <threadImpl.dispatcherComponentMutexName>;

	// dispatch interfaces for Periodic and IRQ ports.
	<threadImpl.dispatchers:writeProvidedInterface()>

	<if(threadImpl.inputEventPortList || threadImpl.inputEventDataPortList)>
	// provided interfaces for receive interfaces.
	<endif>
	<threadImpl.inputEventPortList:writeReceiveInterface()>
	<threadImpl.inputEventDataPortList:writeReceiveInterface()>
	
	// references to other active thread send interfaces
	<writeSenders(threadImpl)>

	// references to passive receivers	
	<model.passiveThreadImplementations:writeToPassiveReceiver()>
	uses <threadImpl.idlName> <threadImpl.interfaceInstanceName>;
}
>>

dispatcherComponentCamkesPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>

>>
