import "eChronosComponentC.stg"
import "Common.stg"
import "CommonCPrototypes.stg"

////////////////////////////////////////////////////////////////////////////
//
// Declarations related to eChronos .prx file
// 
////////////////////////////////////////////////////////////////////////////

filePurpose(sysInstanceName) ::= <<
This file contains the declarations required for the cross-component 
RPC calls for eChronos.
>>

headerIfdef(sysInstanceName) ::= "__SMACCM_<sysInstanceName>_decls__H"

headerPrefix(name, date, path) ::= <<
#ifndef <headerIfdef(name)>
#define <headerIfdef(name)>

<DARPALicenseComment()>

<filenameBlockComment(date, path, filePurpose(name))>
	
#include \<stdbool.h>
#include \<stddef.h>
#include \<stdint.h>

>>

headerPostfix(name, path) ::= <<

/* endif for: #ifndef <headerIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>


dataWriterDecl(port) ::= <<
bool <incomingPortWriterName(port)>(<port.type.camkesInputType.name> arg); 
>> 

eventWriterDecl(port) ::= <<
bool <incomingPortWriterName(port)>(); 
>>

periodicDispatcherDecl(dispatcher) ::= <<
void <outgoingActiveThreadDispatchName(dispatcher)>(<dispatcher.type.aadlInputType.name> arg); 
>>

/*
 * In CAmkES, we write to the output port.
 * In eChronos, we should write to the input port.
 * So, we only want the input ports.  We don't 
 * even want the dispatchers.  However, for event
 * and event data ports, we need to know whether 
 * the thread is active or passive so that we know 
 * what can subsequently dispatch.
 */

activeThreadDecls(threadImpl) ::= <<
<threadImpl.inputDataPortList:dataWriterDecl()>
<threadImpl.inputEventDataPortList:dataWriterDecl()>	
<threadImpl.inputEventPortList:eventWriterDecl()>
<threadImpl.periodicDispatchers:periodicDispatcherDecl()>
>>

passiveThreadDecls(threadImpl) ::= <<
<threadImpl.inputDataPortList:dataWriterDecl()>
<threadImpl.dispatchers:userEntrypointCallerDecl()>
>>

headerBody(model) ::= <<
   <model.activeThreadImplementations:activeThreadDecls()>
   <model.passiveThreadImplementations:passiveThreadDecls()>
>>