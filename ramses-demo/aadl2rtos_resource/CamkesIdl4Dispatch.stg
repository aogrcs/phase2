import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to .idl4 files for dispatch interfaces
// 
////////////////////////////////////////////////////////////////////////////


dispatchInterfaceIdlPurpose(componentName) ::= <<
This .idl4 file contains the dispatcher interface used for dispatching 
the thread implementation <componentName>.
>>

dispatchInterfaceIdlPrefix(name, date, path) ::= "<stdFilePrefix(date, path, dispatchInterfaceIdlPurpose(name))>"

dispatchInterfaceIdlPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>
>>

dispatcherInputArg(arg) ::= "refin <arg.type> <arg.name>"


dispatcherDeclaration(dispatcher, arg) ::= << void <dispatcher.idlDispatcherName>(<arg; separator=",\n   ">) >>

dispatcherPrototype(dispatcher, arg) ::= <<
<dispatcherDeclaration(dispatcher, arg)>; 
>>

port_params(dispatchContract, port) ::= <<
<if(dispatchContract.canDispatch)> <if(port.hasData)><\\>
out <dispatchContract.dispatchStructTypeName> <port.data>, 
<endif>out <port.indexType.name> <port.index>
<endif> >>

contract_params(dispatchContract) ::= << 
			<port_params(dispatchContract, dispatchContract.port)>
>>

dispatcher(dispatcher) ::= <<
<if(dispatcher.hasData)>
void <dispatcher.idlDispatcherName>(<[{refin <dispatcher.type.name> smaccm_in}, 
	  dispatcher.dispatchableContracts:contract_params()]; separator=",\n">); 
<else>
void <dispatcher.idlDispatcherName>(<dispatcher.dispatchableContracts:contract_params(); separator=",">);
<endif>
>>

dispatcherProc(threadImpl, datatypesHeader) ::= <<

procedure <threadImpl.idlName> {
    include <\u003C><datatypesHeader><\u003E>;
    <threadImpl.dispatchers:dispatcher(); separator="\n">
}

>> 

