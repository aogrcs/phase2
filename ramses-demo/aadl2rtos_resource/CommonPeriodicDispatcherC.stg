import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations for periodic dispatcher gluecode c file
// 
////////////////////////////////////////////////////////////////////////////

periodicDispatcherCPurpose(componentName) ::= <<
This .c file contains the CAmkES periodic dispatcher component definition.
>>

periodicDispatcherCPrefix(name, date, path, datatypesHeader) ::= <<
<DARPALicenseComment()>

<filenameBlockComment(date, path, periodicDispatcherCPurpose(name))>

>>

writePeriodicDispatcher(dispatcher, threadCalendar) ::= <<
if ((smaccm_calendar_counter % (<dispatcher.periodicDispatcherPeriod> / smaccm_tick_interval)) == 0) {
	uint64_t the_time = clock_get_time();
	<dispatcher.dispatcherComponentDispatchName>_<dispatcher.type.writerFn>(&the_time); 
}
>>

periodicComponentCBody(threadCalendar) ::= <<

// Declarations for managing periodic thread dispatch
const uint32_t smaccm_tick_interval = <threadCalendar.greatestCommonDivisorInMilliseconds>;
const uint32_t smaccm_hyperperiod_subdivisions = <threadCalendar.hyperperiodSubdivisions>;
uint32_t smaccm_calendar_counter = 0;
uint32_t smaccm_calendar_ticks = 0;


void smaccm_thread_calendar() {
	<threadCalendar.periodicDispatchers:writePeriodicDispatcher(threadCalendar)>

	smaccm_calendar_counter = (smaccm_calendar_counter + 1) % smaccm_hyperperiod_subdivisions; 
	smaccm_calendar_ticks++; 
}

void smaccm_periodic_irq_callback() {
	clock_irq_callback();
	smaccm_thread_calendar(); 
	irq_reg_callback(smaccm_periodic_irq_callback, NULL);
}

int run(void)
{
	irq_reg_callback(smaccm_periodic_irq_callback, NULL);
	clock_init();
	clock_set_interval_in_ms(<threadCalendar.greatestCommonDivisorInMilliseconds>);

	clock_start_timer();

	return 0;
}
 
>>

periodicDispatcherCPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>

>>

////////////////////////////////////////////////////////////////////////////
//
// Declarations for periodic dispatcher camkes component
// 
////////////////////////////////////////////////////////////////////////////

writePeriodicSender(dispatcher) ::= <<
<if(dispatcher.isPeriodic)><\\>
uses <dispatcher.type.readerWriterInterfaceName> <dispatcher.dispatcherComponentDispatchName>; 
<endif>
>>

writePeriodicSenders(threadImpl) ::= <<
<threadImpl.dispatchers:writePeriodicSender()>
>>
 
periodicDispatcherCamkesBody(model, type) ::= <<

import "../../interfaces/<type.readerWriterIdlFileName>";

component <model.threadCalendar.periodicDispatcherComponentName> {
	control;
	consumes DataAvailable irq;
	dataport Buf mem;
	<model.activeThreadImplementations:writePeriodicSenders()>
}

>>

