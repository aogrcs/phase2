import "Common.stg"
import "CommonOSSpecificNames.stg"

////////////////////////////////////////////////////////////////////////////
//
// Declarations for periodic dispatcher gluecode c file
// 
////////////////////////////////////////////////////////////////////////////

periodicDispatcherCPurpose(componentName) ::= <<
This .c file contains the CAmkES periodic dispatcher component definition.
>>

periodicDispatcherCPrefix(name, date, path, datatypesHeader) ::= <<
<DARPALicenseComment()>

<filenameBlockComment(date, path, periodicDispatcherCPurpose(name))>

>>

writePeriodicDispatcher(dispatcher, threadCalendar) ::= <<
if ((smaccm_calendar_counter % (<dispatcher.periodicDispatcherPeriod> / smaccm_tick_interval)) == 0) {
	uint64_t the_time = clock_get_time();
	<outgoingActiveThreadDispatchName(dispatcher)>(&the_time); 
}
>>

periodicComponentCDispatchers(threadCalendar) ::= <<

// Declarations for managing periodic thread dispatch
const uint32_t smaccm_tick_interval = <threadCalendar.greatestCommonDivisorInMilliseconds>;
const uint32_t smaccm_hyperperiod_subdivisions = <threadCalendar.hyperperiodSubdivisions>;
uint32_t smaccm_calendar_counter = 0;
uint32_t smaccm_calendar_ticks = 0;


void smaccm_thread_calendar() {
	<threadCalendar.periodicDispatchers:writePeriodicDispatcher(threadCalendar)>

	smaccm_calendar_counter = (smaccm_calendar_counter + 1) % smaccm_hyperperiod_subdivisions; 
	smaccm_calendar_ticks++; 
}
 
>>

periodicDispatcherCPostfix(name, path) ::= <<

<blockComment(arg={End of autogenerated file: <path>})>

>>

