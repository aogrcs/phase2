import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// Declarations related to component gluecode header files for CAmkES
// 
////////////////////////////////////////////////////////////////////////////

componentGlueCodeHeaderPurpose() ::= <<
This header section contains the AADL gluecode interfaces used by the client
for the thread implementations.
>>

componentGlueCodeHeaderIfdef(sysInstanceName) ::= "__SMACCM_<sysInstanceName>_types__H"


componentGlueCodeHeaderPrefix(name, date, path, datatypesHeader) ::= <<
#ifndef <componentGlueCodeHeaderIfdef(name)>
#define <componentGlueCodeHeaderIfdef(name)>

#include <\u003C><datatypesHeader><\u003E>
	
<DARPALicenseComment()>

<filenameBlockComment(date, path, componentGlueCodeHeaderPurpose())>

>>



writeExternalHandlerUdePrototype(externalHandler, dispatcher) ::= <<
<if(dispatcher.isEventData || dispatcher.isPeriodic)><\\>
void <externalHandler.handlerName>(<dispatcher.nameAsInputParam>); 
<else><\\>
void <externalHandler.handlerName>();
<endif>
>>

writeUdePrototype(dispatcher) ::= <<
<dispatcher.externalHandlers:writeExternalHandlerUdePrototype(dispatcher)>
>>

writePortWriterPrototype(port) ::= <<
bool <port.aadlWriterFnName>(<if(port.hasData)><port.nameAsInputParam><endif>); 
>>

writePortReaderPrototype(port) ::= <<
bool <port.aadlReaderFnName>(<if(port.hasData)><port.nameAsOutputParam><endif>); 
>>

writeSharedDataPrototype(sda) ::= <<
<if(sda.accessContainsInput)><\\>
bool <sda.readerFnName>(<sda.nameAsInputParam>);
<endif><if(sda.accessContainsOutput)><\\>
bool <sda.writerFnName>(<sda.nameAsOutputParam>);
<endif>

>>

componentGlueCodeHeaderBody(threadImpl) ::= <<
	<threadImpl.dispatchers:writeUdePrototype()>
	<threadImpl.outputPortList:writePortWriterPrototype()>
	<threadImpl.inputPortList:writePortReaderPrototype()>
	<threadImpl.sharedDataAccessorList:writeSharedDataPrototype()>
	
>>

componentGlueCodeHeaderPostfix(name, path) ::= <<

/* endif for: #ifndef <componentGlueCodeHeaderIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>

cStmt(stmt) ::= "<stmt>;"

