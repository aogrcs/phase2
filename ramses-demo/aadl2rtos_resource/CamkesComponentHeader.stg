import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// CamkesComponentHeader.stg
// 
// component gluecode header files for CAmkES
// 
////////////////////////////////////////////////////////////////////////////

componentGlueCodeHeaderPurpose() ::= <<
This header section contains the AADL gluecode interfaces used by the client
for the thread implementations.
>>

componentGlueCodeHeaderIfdef(sysInstanceName) ::= "__SMACCM_<sysInstanceName>_types__H"


componentGlueCodeHeaderPrefix(name, date, path, datatypesHeader) ::= <<
#ifndef <componentGlueCodeHeaderIfdef(name)>
#define <componentGlueCodeHeaderIfdef(name)>

#include <\u003C><datatypesHeader><\u003E>
	
<DARPALicenseComment()>

<filenameBlockComment(date, path, componentGlueCodeHeaderPurpose())>

>>



writeExternalHandlerUdePrototype(externalHandler, dispatcher) ::= <<
<if(dispatcher.isEventData || dispatcher.isPeriodic)><\\>
void <externalHandler.handlerName>(<dispatcher.type.aadlInputType.name> <dispatcher.name>); 
<else><\\>
void <externalHandler.handlerName>();
<endif>
>>

writeUdePrototype(dispatcher) ::= <<
<dispatcher.externalHandlers:writeExternalHandlerUdePrototype(dispatcher)>
<if(dispatcher.isIRQ)>void <dispatcher.firstLevelInterruptHandler>();<endif>
>>

writePortWriterPrototype(port) ::= <<
bool <port.aadlWriterFnName>(<if(port.hasData)><port.type.aadlInputType.name> <port.name><endif>); 
>>

writePortReaderPrototype(port) ::= <<
bool <port.aadlReaderFnName>(<if(port.hasData)><port.type.aadlOutputType.name> <port.name><endif>); 
>>

writeSharedDataPrototype(sda) ::= <<
<if(sda.accessContainsInput)><\\>
bool <sda.readerFnName>(<sda.nameAsInputParam>);
<endif><if(sda.accessContainsOutput)><\\>
bool <sda.writerFnName>(<sda.nameAsOutputParam>);
<endif>

>>

writeAadlCRpcPrototypeSemi(rpc, endpoint) ::= <<<writeAadlCRpcPrototype(rpc, endpoint)>;>>

writeEndpointPrototype(endpoint) ::= <<
<if(!endpoint.isExternal)><\\>
<endpoint.remoteProcedureGroup.remoteProcedures:writeAadlCRpcPrototypeSemi(endpoint); separator="\n">
<endif>
>>


portInitializer(port) ::= <<
<if(port.hasInitializeEntrypoint)>void <port.initializeEntrypointOpt.handlerName>();
<endif>
>>

componentGlueCodeHeaderBody(threadImpl) ::= <<
	<threadImpl.dispatchers:writeUdePrototype()>
	<threadImpl.outputPortList:writePortWriterPrototype()>
	<threadImpl.inputPortList:writePortReaderPrototype()>
	<threadImpl.sharedDataAccessorList:writeSharedDataPrototype()>
	<threadImpl.endpoints:writeEndpointPrototype()>
	<threadImpl.portList:portInitializer()>
	<if(threadImpl.hasInitializeEntrypoint)>void <threadImpl.initializeEntrypointOpt.handlerName>();<endif>
	<if(threadImpl.isExternal)>
		//////////////////////////////////////////////////////////////////////////
		// 
		// Note: thread is declared EXTERNAL; user should provide run() function.
		//
		//////////////////////////////////////////////////////////////////////////
	<endif>	
>>

componentGlueCodeHeaderPostfix(name, path) ::= <<

/* endif for: #ifndef <componentGlueCodeHeaderIfdef(name)> */
#endif

<blockComment(arg={End of autogenerated file: <path>})>

>>

cStmt(stmt) ::= "<stmt>;"

